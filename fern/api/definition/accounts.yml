# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml
  products: products.yml

service:
  auth: true
  base-path: ""
  endpoints:
    listAccounts:
      path: /accounts
      method: GET
      docs: >-
        Return a paginated list of the customer's accounts, consisting of
        internal accounts at this financial institution and accounts at other
        financial institutions, if any.
      display-name: List Accounts
      request:
        name: listAccountsRequest
        query-parameters:
          productType: 
            docs: >-
              Include only accounts whose `product.type` is in pipe-delimited set.
              For example, to list only savings, checking, and CD accounts, 
              use <br>`?productType=savings|checking|cd`.
            type: optional<products.productType>
            allow-multiple: true
          location:
            docs: >-
              Filter accounts to just a subset of `internal` or `external`
              accounts (per the `location` property on the
              [`accountItem`](#schema-accountItem) schema).
            type: optional<accountLocation>
          start:
            docs: >-
              The location of the next item in the collection. This is an opaque
              cursor supplied by the API service. Omit this to start at the
              beginning of the collection. The client does not define this
              value; the API services automatically pass the `?start=` parameter
              on the `nextPage_url`.
            type: optional<string>
          limit:
            docs: The maximum number of items to return in this paged response.
            type: optional<integer>
          accountAllowsQueryParam: 
            docs: >-
              Filter the result to accounts that have corresponding `true` values in `account.allows`.
              For example `?allows=transferTo,transferFrom,view` returns only accounts where
              `account.allows.transferTo`, `account.allows.transferFrom`, and `account.allows.view`
              are all `true` for the caller.
            type: optional<string>
            allow-multiple: true
      response: accounts
      errors: 
        - commons.BadRequest
        - commons.Unauthorized
        - commons.Forbidden
        - commons.UnprocessableEntity

    getAccount:
      path: /accounts/{accountId}
      method: GET
      docs: Return details of the customer's internal account.
      display-name: Get an Account
      path-parameters:
        accountId:
          docs: >-
            The unique identifier of this account resource. This is an opaque
            string.
          type: string
      response: account
      errors: 
        - commons.Unauthorized
        - commons.Forbidden
        - commons.NotFound

    listAccountBalances:
      path: /accountBalances
      method: GET
      docs: >-
        Return a list of the requested internal accounts' balances. The
        `accounts` query parameter is a list of account IDs which typically
        comes from the `getAccounts` operation response. The returned list does
        not include external accounts. The caller must have entitlements to view
        each account's details, as indicated by a `true` value for
        `account.allows.view`. Requests to list balances for accounts the user
        is not allowed to read results in a 403 Forbidden response.
        The response may be incomplete. Given a `Retry-After` response header,
        the client can retry the operation after a short delay, requesting only
        the accounts which are incomplete; see the 202 Accepted response for
        details.
      display-name: List Account Balances
      request:
        name: listAccountBalancesRequest
        query-parameters:
          accountIds: 
            docs: >-
              1000 maxItems is tied to 1000 maximum of the ?limit query parameter
            type: optional<commons.resourceId>
            allow-multiple: true
          retryCount:
            docs: >-
              When retrying the operation, pass the `retryCount` from the
              `incompleteAccountBalances` response.
            type: optional<integer>
      response: accountBalances
      errors: 
        - commons.Unauthorized
        - commons.Forbidden
        - commons.UnprocessableEntity

    listEligibleAchAccounts:
      path: /achEligibleAccounts
      method: GET
      docs: >-
        Return a paginated list of a customer's accounts that are eligible for
        ACH transfers based on allowed privileges.
        Optionally, an agent can access a business customer's ACH accounts when
        acting on behalf of that business customer via the optional `customerId`
        query parameter.
      display-name: List Eligible ACH Accounts
      request:
        name: listEligibleAchAccountsRequest
        query-parameters:
          allows: 
            docs: | 
              Filter the result to accounts that have corresponding `true` values in `account.allows`.
              For example `?allows=transferTo,transferFrom,view` returns only accounts where
              `account.allows.transferTo`, `account.allows.transferFrom`, and `account.allows.view`
              are all `true` for the caller.
            type: optional<accountAllowsFilter>
            allow-multiple: true
          secCode:
            docs: >-
              Filter the result to accounts that allow ACH transfers of the
              given Standard Entry Class (SEC) codes.
            type: achSecCode
          customerId:
            docs: >-
              The optional identifier of a business customer. This is an opaque
              string. An agent who is operating on behalf of a business can use
              this to access the resources of that business customer. The agent
              must have entitlements to act on behalf of the business; if not,
              the operation returns a 403 Forbidden response. For other
              situations, omit this value, else this _must_ match the
              authenticated caller's customer ID (not their access ID).
            type: optional<string>
          start:
            docs: >-
              The location of the next item in the collection. This is an opaque
              cursor supplied by the API service. Omit this to start at the
              beginning of the collection. The client does not define this
              value; the API services automatically pass the `?start=` parameter
              on the `nextPage_url`.
            type: optional<string>
          limit:
            docs: The maximum number of items to return in this paged response.
            type: optional<integer>
      response: accounts
      errors: 
        - commons.BadRequest
        - commons.Unauthorized
        - commons.Forbidden
        - commons.UnprocessableEntity
    
    listAccountJointOwners:
      path: /accounts/{accountId}/jointOwners
      method: GET
      docs: >-
        Return a collection of account joint owners. The user must have the
        `account.manageJointOwners` permission to use this operation.
      display-name: Return a collection of account joint owners
      path-parameters:
        accountId:
          docs: >-
            The unique identifier of this account resource. This is an opaque
            string.
          type: string
      response: accountJointOwners
      errors: 
        - commons.Unauthorized
        - commons.Forbidden
        - commons.NotFound

    createJointOwnerInvitation:
      path: /accounts/{accountId}/jointOwnerInvitations
      method: POST
      docs: >-
        Create and send an invitation to another person to become a joint owner
        of the account. The invitation will be sent to the invitee's email
        address. The invitation directs the invitee to a web page to verify and
        accept the invitation, and if necessary, enroll in digital banking.
        The authenticated user must have the `account.allows.manageJointOwners`
        permission to use this operation.
      display-name: Invite a joint owner
      path-parameters:
        accountId:
          docs: >-
            The unique identifier of this account resource. This is an opaque
            string.
          type: string
      request: newJointOwnerInvitation
      response: jointOwnerInvitation
      errors: 
        - commons.Unauthorized
        - commons.Forbidden
        - commons.NotFound
        - commons.UnprocessableEntity
    
    listEligibleOverdraftAccounts:
      path: /accounts/{accountId}/eligibleOverdraftAccounts
      method: GET
      docs: >-
        Return a paginated list of a customer's accounts that are eligible to
        serve as overdraft protection accounts for the given account. An
        overdraft protection account is a deposit account that the financial
        institution can transfer funds from to prevent the account balance from
        going negative and incurring non-sufficient funds fees.
        The user must have the `allows.manageOverdraftAccounts` permission on
        the account to use this operation.
        To obtain available balances for these accounts, use
        [`listAccountBalances`](#op-listAccountBalances).
      display-name: List Eligible Overdraft Accounts
      path-parameters:
        accountId:
          docs: >-
            The unique identifier of this account resource. This is an opaque
            string.
          type: string
      request:
        name: listEligibleOverdraftAccountsRequest
        query-parameters:
          start:
            docs: >-
              The location of the next item in the collection. This is an opaque
              cursor supplied by the API service. Omit this to start at the
              beginning of the collection. The client does not define this
              value; the API services automatically pass the `?start=` parameter
              on the `nextPage_url`.
            type: optional<string>
          limit:
            docs: The maximum number of items to return in this paged response.
            type: optional<integer>
      response: eligibleOverdraftAccounts
      errors: 
        - commons.Unauthorized
        - commons.Forbidden
        - commons.NotFound
        - commons.UnprocessableEntity

    getOverdraftProtection:
      path: /accounts/{accountId}/overdraftProtection
      method: GET
      docs: >-
        Return the JSON representation of this account's overdraft protection
        settings.
      display-name: Fetch a representation of the account's overdraft protection settings
      path-parameters:
        accountId:
          docs: >-
            The unique identifier of this account resource. This is an opaque
            string.
          type: string
      response: overdraftProtection
      errors: 
        - commons.Forbidden
        - commons.NotFound

    patchOverdraftAccounts:
      path: /accounts/{accountId}/overdraftProtection
      method: PATCH
      docs: >-
        Perform a partial update of the overdraft accounts. Only fields in the
        request body are updated on the resource; fields which are omitted are
        not updated. To add, replace, or remove an overdraft account, add,
        replace, or remove the corresponding account item from the `items`
        array. Only the account `id` in the items is significant.
        The user must have the `allows.manageOverdraftAccounts` permission on
        the account to use this operation.
      display-name: Update the overdraft accounts
      request: overdraftProtectionPatch
      path-parameters:
        accountId:
          docs: >-
            The unique identifier of this account resource. This is an opaque
            string.
          type: string
      response: overdraftProtection
      errors: 
        - commons.Unauthorized
        - commons.Forbidden
        - commons.NotFound
        - commons.UnprocessableEntity

types:
  eligibleOverdraftAccounts:
    docs: >-
      A page of zero or more accounts that are eligible to be assigned as an
      overdraft protection account for another account.
    extends:
      - commons.abstractPagedBody
    properties:
      items:
        docs: The items in this page of accounts.
        type: unknown
      maximumOverdraftAccounts:
        docs: >-
          The maximum number of overdraft protection accounts that may be linked
          to the account.
        type: integer

  overdraftProtection:
    docs: >-
      Representation of the overdraft protection settings, consisting of a list
      of overdraft protection accounts linked to the account identified by the
      `{accountId}`.
    extends:
      - commons.abstractBody
      - overdraftProtectionFields
    properties:
      maximumOverdraftAccounts:
        docs: >-
          The maximum number of overdraft protection accounts that may be linked
          to the account.
        type: integer

  overdraftProtectionFields:
    docs: Fields used to compose other overdraft protection schemas.
    properties:
      accounts:
        docs: >-
          The ordered list of accounts assigned as overdraft protection
          accounts. This array is limited to no more than
          `maximumOverdraftAccounts` accounts.
        type: optional<unknown>

  overdraftProtectionPatch:
    docs: >-
      Representation of request used to patch the overdraft protection settings
      consisting of a list of overdraft protection accounts linked to the
      account identified by the `{accountId}`.
    extends:
      - commons.abstractBody
      - overdraftProtectionFields

  accountJointOwners:
    docs: >-
      Collection of account joint owners. The items in the collection are
      ordered in the `items` array.
    properties:
      items:
        docs: An array containing account joint owner items.
        type: list<accountJointOwner>

  accountJointOwner:
    docs: Representation of account joint owner resources.
    extends:
      - commons.abstractBody
    properties:
      id: commons.readOnlyResourceId
      name:
        docs: The full name of the joint owner.
        type: string

  newJointOwnerInvitation:
    docs: A request to create an invitation to add a new joint owner to an account.
    extends:
      - commons.abstractBody
      - jointOwnerInvitationFields

  jointOwnerInvitation:
    docs: A joint owner invitation.
    extends:
      - commons.abstractBody
      - jointOwnerInvitationFields
    properties:
      id: commons.readOnlyResourceId

  jointOwnerInvitationFields:
    docs: Fields used to compose other joint owner invitation schemas.
    properties:
      firstName:
        docs: The invitee's first name.
        type: string
      lastName:
        docs: The invitee's last name name.
        type: string
      taxId:
        docs: >-
          The last 4 digits of the invitee's tax ID number (Social Security
          Number). This is not sent in the invitation email, but if the invitee
          enrolls in digital banking, this identification must match the last
          four digits of the tax ID they use to enroll.
        type: optional<string>
      sharedSecret:
        docs: >-
          A string shared by the inviter with the invitee to verify their
          identity. This is not sent in the invitation. The inviter should share
          this string with the invitee though another channel.
        type: string
      emailAddress:
        docs: The invitee's email address.
        type: string
      disallowDebitCardAccess:
        docs: >-
          If `true`, the invitee is not allowed to order or manage debit cards
          for the account.
        type: optional<boolean>

  accounts:
    docs: >-
      A paginated list of the customer's accounts. This list contains internal
      banking accounts and external banking accounts. and outside fund accounts.
      The `location` property indicates where the account is held. Items in the
      list contain `url` links to the actual account resource which are in the
      `accounts`, `externalAccounts` or `outsideAccounts` collections.
    extends:
      - commons.abstractPagedBody
    properties:
      items:
        docs: The array of items in this page of accounts. This array may be empty.
        type: list<accountItem>
      count:
        docs: >-
          The total number of accounts for which the user has access. This value
          ignores any filters. This value is _optional_ and may be omitted if
          the count is not computable efficiently.
        type: optional<integer>
      primaryAccountId: optional<commons.readOnlyResourceId>

  accountItem:
    docs: An account item in a list items in the `accounts` schema.
    properties:
      id:
        docs: >-
          The unique identifier for this account resource. This is an immutable
          opaque string.
        type: optional<commons.readOnlyResourceId>
      label:
        docs: >-
          The human-readable label for this account. This is either the
          `nickname` (if assigned for the current customer), or the
          `product.label` concatenated with the `maskedNumber`.
        type: optional<string>
      nickname: optional<accountNickname>
      maskedNumber: optional<maskedAccountNumber>
      allows: accountPermissions
      product: optional<products.productReference>
      location:
        docs: Indicates where an account is held.
        type: optional<accountLocation>

  accountFields:
    docs: Fragment schema use to build other account schemas.
    properties:
      id:
        docs: >-
          The unique identifier for this account resource. This is an immutable
          opaque string.
        type: commons.readOnlyResourceId
      label:
        docs: >-
          The human-readable label for this account. This is either the
          `nickname` (if assigned for the current customer), or the
          `product.label` concatenated with the `maskedNumber`.
        type: string
      nickname: optional<accountNickname>
      maskedNumber: maskedAccountNumber
      product: products.productReference
      location:
        docs: Indicates where an account is held.
        type: accountLocation

  accountLocation:
    docs: >-
      Indicates where an account is held:
        * `internal` accounts at the current financial institution;
        * `external` accounts at another financial institution;
        * `outside` accounts non-banking accounts such as brokerage and fund accounts.
      Account transfers are only allowed between `internal` and `external`
      accounts. All accounts are considered when calculating total cash balance.
    enum:
      - internal
      - external
      - outside

  accountNickname:
    docs: >-
      The nickname (friendly name) the customer has given this account. Each
      customer can define their own nickname for the same account. If omitted,
      the customer has not set a nickname.
    type: string

  maskedAccountNumber:
    docs: >-
      A masked account number: an asterisk `*` followed by one to four
      characters of the `fullAccountNumber`.
    type: string

  accountPermissions:
    docs: >-
      Flags which indicate the permissions the current authorized user has on
      this account item resource. Most of these properties may only be `true`
      for internal accounts. These permissions are available in account items in
      the [`accounts`](#schema-accounts) list. See
      [`fullAccountPermissions`](#schema-fullAccountPermissions) for all
      capabilities a customer has on an account (the `account.allows` object in
      the [`account`](#schema-account) object response from
      [`getAccount`](#op-getAccount).)
    properties:
      billPay:
        docs: If `true`, the customer may use this account for Bill Pay.
        type: boolean
      mobileCheckDeposit:
        docs: >-
          If `true`, the customer may use this account for mobile check
          deposits.
        type: boolean
      transferFrom:
        docs: >-
          If `true`, the customer may use this account as the target (deposit)
          account for account-to-account transfers.
        type: boolean
      transferTo:
        docs: >-
          If `true`, the customer may use this account as the source (debit)
          account for account-to-account transfers.
        type: boolean
      view:
        docs: >-
          If `true`, the customer may view the details of this account,
          including the account balance and transactions.
        type: boolean
      viewCards:
        docs: >-
          If `true`, the customer may view debit cards associated with this
          account.
        type: boolean
      manageCards:
        docs: >-
          If true, the customer may manage debit cards associated with this
          account. This includes locking and unlocking cards, changing card
          controls, ordering cards, or canceling cards.
        type: boolean

  accountAllowsFilter:
    docs: >+
      Values for the `?allows=` filter in [`listAccounts`](#op-listAccounts).
      <strong><code>accountAllowsFilter</code></strong> strings may have one of
      the following
      [enumerated
      values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):
      <table>
      <tr>
        <th>Value</th><th>Description</th>
      </tr>
      <tr>
          <td><strong><code>billPay</code></strong></td><td>Bill Pay: <p>Include each account where the caller is allowed to use the bill pay feature.</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>transferFrom</code></strong></td><td>Transfer From: <p>Include each account where the caller is allowed to transfer money from the account.</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>transferTo</code></strong></td><td>Transfer To: <p>Include each account where the caller is allowed to transfer money into the account.</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>mobileCheckDeposit</code></strong></td><td>Mobile Check Deposit: <p>Include each account where the caller is allowed to deposit mobile checks.</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>view</code></strong></td><td>View: <p>Include each account where the caller is allowed to view full account details (balances, full account number, transactions, etc).</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>viewCards</code></strong></td><td>View Cards: <p>Include each account where the caller is allowed to view debit card details.</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>manageCards</code></strong></td><td>Manage Cards: <p>Include each account where the caller is allowed to manage debit card details.</p>
      </td>
          </tr>
      </table>
    enum:
      - billPay
      - transferFrom
      - transferTo
      - mobileCheckDeposit
      - view
      - viewCards
      - manageCards

  account:
    docs: An internal customer account.
    extends:
      - commons.abstractBody
      - accountFields
    properties:
      allows:
        docs: >-
          Flags which indicate the permissions the current authorized user has
          on this account resource.
        type: fullAccountPermissions
      electronicStatements:
        docs: >-
          If `true`, the customer has opted in to receive account statements
          electronically.
        type: boolean

  fullAccountPermissions:
    docs: >-
      Flags which indicate the permissions the current authorized user has on
      this account resource. Most of these properties may only be `true` for
      internal accounts. These permissions are available in
      [`account`](#schema-account) response from the
      [`getAccount`](#op-getAccount) operation. See
      [`accountPermissions`](#schema-accountPermissions) for the subset of
      permission in `account.allows` flags in the
      [`listAccounts`](#op-listAccounts) response.
    extends:
      - accountPermissions
    properties:
      manageJointOwners:
        docs: >-
          If `true`, the customer can list the other joint owners on the account
          and invite new joint owners.
        type: boolean
      manageOverdraftAccounts:
        docs: >-
          If `true`, the customer can list and manage overdraft account
          settings.
        type: boolean

  accountBalances:
    docs: An array of account balances by account ID.
    extends:
      - commons.abstractBody
    properties:
      items:
        docs: >-
          An array of items, one for each of the `?accounts=` in the request,
          returned in the same order.
        type: list<accountBalance>

  accountIds:
    docs: An array of account IDs.
    type: list<commons.resourceId>

  accountBalance:
    docs: The current balances of the given account.
    properties:
      id: commons.readOnlyResourceId
      available:
        docs: >-
          The available balance: the funds available for use. This is the string
          representation of the exact decimal amount.
        type: optional<commons.creditOrDebitValue>
      current:
        docs: >-
          The current balance. This is the balance at the end of the previous
          business day. This is the string representation of the exact decimal
          amount.
        type: optional<commons.creditOrDebitValue>
      updatedAt: optional<commons.readOnlyTimestamp>
      currentWithPending:
        docs: >-
          The current balance, with posted transactions. This is the string
          representation of the exact decimal amount.
        type: optional<commons.creditOrDebitValue>
      incomplete:
        docs: >-
          If `true`, the response is incomplete and the client may retry the
          operation after the `Retry-After` time in order to fetch balances for
          any incomplete accounts in the `items`. The retry operation should
          only pass in accounts that are `incomplete`.
        type: boolean

  achSecCode:
    docs: >+
      The ACH transfer type.
      <strong><code>achSecCode</code></strong> strings may have one of the
      following
      [enumerated
      values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):
      <table>
      <tr>
        <th>Value</th><th>Description</th>
      </tr>
      <tr>
          <td><strong><code>arc</code></strong></td><td>Accounts Receivable</td>
          </tr>
      <tr>
          <td><strong><code>boc</code></strong></td><td>Back Office Conversion</td>
          </tr>
      <tr>
          <td><strong><code>ccd</code></strong></td><td>Credit or Debit</td>
          </tr>
      <tr>
          <td><strong><code>cie</code></strong></td><td>Customer-Initiated</td>
          </tr>
      <tr>
          <td><strong><code>ctx</code></strong></td><td>Corporate Trade Exchange</td>
          </tr>
      <tr>
          <td><strong><code>pop</code></strong></td><td>Point of Purchase</td>
          </tr>
      <tr>
          <td><strong><code>ppd</code></strong></td><td>Prearranged Payment and Deposit</td>
          </tr>
      <tr>
          <td><strong><code>rck</code></strong></td><td>Re-Presented Check</td>
          </tr>
      <tr>
          <td><strong><code>tel</code></strong></td><td>Telephone-initiated</td>
          </tr>
      <tr>
          <td><strong><code>web</code></strong></td><td>Internet-initiated/Mobile</td>
          </tr>
      </table>
    enum:
      - arc
      - boc
      - ccd
      - cie
      - ctx
      - pop
      - ppd
      - rck
      - tel
      - web
