# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

types:
  abstractPagedBody:
    docs: >-
      An abstract schema used to define paginated collections of resources.
      Collection classes which extend this schema define an array of `items`
      which represent a page of data.
    extends:
      - abstractBody
      - abstractPagedBodyFields
    properties:
      start:
        docs: >-
          The opaque cursor that specifies the starting location of this page of
          items.
        type: optional<string>

  abstractBody:
    docs: >-
      An abstract schema used to define other request and response body model
      schemas.
    properties: {}

  abstractPagedBodyFields:
    docs: Common properties of collection page responses.
    properties:
      limit:
        docs: >-
          The number of items requested for this page response. The length of
          the `items` array may be less that `limit`.
        type: integer
      nextPage_url:
        docs: >-
          The URL of the next page of resources. If this URL is omitted, there
          are no more resources in the collection.
        type: optional<string>

  readOnlyResourceId:
    docs: >-
      The unique, opaque system-assigned identifier for a resource. This
      case-sensitive ID is also used in URLs as path parameters or in other
      properties or parameters that reference a resource by ID rather than URL.
      Resource IDs are immutable.
    type: resourceId

  resourceId:
    docs: >-
      The unique, opaque system identifier for a resource. This case-sensitive
      ID is also used as path parameters in URLs or in other properties or
      parameters that reference a resource by ID rather than URL.
    type: string

  creditOrDebitValue:
    docs: >-
      The monetary value representing a credit (positive amounts with no prefix
      or a `+` prefix) or debit (negative amounts with a `-` prefix). The
      numeric value is  represented as a string so that it can be exact with no
      loss of precision.<br>The schema `creditOrDebitValue` was added on version
      `0.4.0` of the API.
    type: string

  transferFrequency:
    docs: >+
      For recurring transfers, the interval at which the money movement recurs.
      <strong><code>transferFrequency</code></strong> strings may have one of
      the following
      [enumerated
      values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):
      <table>
      <tr>
        <th>Value</th><th>Description</th>
      </tr>
      <tr>
          <td><strong><code>once</code></strong></td><td>Once: <p>Transfer does not repeat</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>occasional</code></strong></td><td>Occasional: <p>Transfer recurs but without a new scheduled date</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>daily</code></strong></td><td>Daily: <p>Repeat daily on business days</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>weekly</code></strong></td><td>Weekly: <p>Repeat weekly</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>biweekly</code></strong></td><td>biweekly: <p>Repeat every two weeks (26 times a year)</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>semimonthly</code></strong></td><td>Semimonthly: <p>Repeat twice a month (24 times a year)</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>monthly</code></strong></td><td>Monthly: <p>Repeat monthly</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>monthlyFirstDay</code></strong></td><td>Monthly First Day: <p>Repeat on the first business day of the month</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>monthlyLastDay</code></strong></td><td>Monthly Last Day: <p>Repeat on the last business day of the month</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>bimonthly</code></strong></td><td>Bimonthly: <p>Repeat every other month</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>quarterly</code></strong></td><td>Quarterly: <p>Repeat quarterly (four times a year)</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>semiyearly</code></strong></td><td>Semiyearly: <p>Repeat every six months (twice a year)</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>yearly</code></strong></td><td>Yearly: <p>Repeat once every year</p>
      </td>
          </tr>
      </table>
    enum:
      - once
      - occasional
      - daily
      - weekly
      - biweekly
      - semimonthly
      - monthly
      - monthlyFirstDay
      - monthlyLastDay
      - bimonthly
      - quarterly
      - semiyearly
      - yearly

  dateRange:
    docs: >-
      A date range, supporting inclusive or exclusive endpoints. Dates ranges
      use dates expressed in `YYYY-MM-DD` [RFC
      3339](https://tools.ietf.org/html/rfc3339) `date` format. The value may
      have the following forms: <ul> <li>`YYYY-MM-DD` match the date exactly;
      equivalent to matching dates in the range `[YYYY-MM-DD,YYYY-MM-DD]`</li>
      <li>`[YYYY-MM-DD,YYYY-MM-DD]` between two dates, inclusive of the
      endpoints</li> <li>`(YYYY-MM-DD,YYYY-MM-DD)` between two dates, exclusive
      of the endpoints</li> <li>`[YYYY-MM-DD,]` on or after the date</li>
      <li>`(YYYY-MM-DD,)` after the date</li> <li>`[,YYYY-MM-DD]` before or on
      the date</li> <li>`(,YYYY-MM-DD)` before the date</li> </ul>
    type: string

  positiveIntegerRange:
    docs: >-
      A positive integer range, supporting inclusive or exclusive endpoints. The
      value may have the following forms: <ul> <li>`1200` match the integer
      1,200 exactly</li> <li>`[1000,1200)` matches items where `1000 <= number <
      1200`</li> <li>`[1000,1199]` matches items where`1000 <= number <=
      1199`</li> <li>`[999,1200]` matches items where `999 < number < 1200`</li>
      <li>`[1200,]`  `number >= 1200`</li> <li>`(1200,)` greater than the value:
      `number >= 1200`</li> <li>`[,1200]` less than or equal to the value:
      `number <= 1200`</li> <li>`(,1200)` less than the value: `number <
      1200`</li> </ul>
    type: string
  
  readOnlyTimestamp:
      docs: >-
        A readonly or derived timestamp (an instant in time) formatted in [RFC 3339](https://tools.ietf.org/html/rfc3339) `date-time`
        UTC format: `YYYY-MM-DDThh:mm:ss.sssZ`.
      type: datetime

  apiProblem:
    docs: 'API problem or error, as per [RFC 7807 application/problem+json](https://tools.ietf.org/html/rfc7807).'
    properties:
      type:
        type: optional<string>
        docs: >
          A [URI reference (RFC3986)](https://tools.ietf.org/html/rfc3986) that identifies the
          problem type. If present, this is the URL of human-readable HTML documentation for the
          problem type.
          When this member is not present, its value is assumed to be `"about:blank"`.
      title:
        type: optional<string>
        docs: >
          A short, human-readable summary of the problem type.
          The title is usually the same for all problem with the same `type`.
      status:
        type: optional<integer>
        docs: >
          The [HTTP status code](https://datatracker.ietf.org/doc/html/rfc7231#section-6)
          for this occurrence of the problem.
      detail:
        type: optional<string>
        docs: >
          A human-readable explanation specific to this occurrence of the problem.
      instance:
        type: optional<string>
        docs: >
          A URI reference that identifies the specific occurrence of the problem.
          This is the URI of an API resource that the problem is related to,
          with a unique error correlation ID URI fragment
      id:
        docs: >-
          The unique identifier for this problem.
          This is an immutable opaque string.
        type: optional<readOnlyResourceId>
      occurredAt:
        docs: The timestamp when the problem occurred, in
          [RFC 3339](https://tools.ietf.org/html/rfc3339)
          date-time `YYYY-MM-DDThh:mm:ss.sssZ` format, UTC.
        type: optional<readOnlyTimestamp>
      problems:
        docs: Optional root-causes if there are multiple problems in the request or API call processing.
        type: optional<list<apiProblem>>
      attributes:
        type: optional<map<string, unknown>>
        docs: Additional optional attributes related to the problem.
          This data conforms to the schema associated with the error type.
    examples:
      - name: Example0
        value:
          id: 3fbad566-be86-4b22-9ba6-3ca99fdc0799
          type: 'https://api.apiture.com/errors/accountNotFound/v1.0.0'
          title: Account Not Found
          status: 422
          occurredAt: '2022-04-25T12:42:21.375Z'
          detail: No account exists at the given account_url
          instance: 'https://api.apiture.com/banking/transfers/bb709151-575041fcd617'

  problemResponse:
    docs: 'API problem or error response, as per [RFC 7807 application/problem+json](https://tools.ietf.org/html/rfc7807).'
    extends:
      - abstractBody
      - apiProblem

errors: 
  BadRequest: 
    status-code: 400
    type: problemResponse
  
  Unauthorized: 
    status-code: 401
    type: problemResponse
  
  Forbidden: 
    status-code: 403
    type: problemResponse
  
  NotFound: 
    status-code: 404
    type: problemResponse
  
  MethodNotAllowed: 
    status-code: 405
    type: problemResponse
  
  UnprocessableEntity: 
    status-code: 422
    type: problemResponse
  
  PreconditionRequired: 
    status-code: 428
    type: problemResponse
  
  TooManyRequests: 
    status-code: 429
    type: problemResponse

  InternalServerError: 
    status-code: 503
    type: problemResponse
