# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: true
  base-path: ""
  endpoints:
    listTransactions:
      path: /accounts/{accountId}/transactions
      method: GET
      docs: >-
        Return a
        [paginated](https://dx.apiture.com/docs/api-documentation/concepts/pagination)
        collection of transaction history for this internal account. The
        [`nextPage_url`](https://dx.apiture.com/docs/api-documentation/concepts/links)
        link in the response, if present, is a pagination link to the next page
        of transactions for the given filters.
        This operation returns a 403 Forbidden error if the customer does not
        have `view` permissions in the `account.allows` object, or a 422
        Unprocessable Entity if called on an external account.
        The default response lists only recent transactions. Normally, this is
        transactions for the most recent 30 days, although for high-volume
        accounts, it may be a shorter period.
      display-name: Return a collection of transactions
      path-parameters:
        accountId:
          docs: >-
            The unique identifier of this account resource. This is an opaque
            string.
          type: string
      request:
        name: listTransactionsRequest
        query-parameters:
          start:
            docs: >-
              The location of the next item in the collection. This is an opaque
              cursor supplied by the API service. Omit this to start at the
              beginning of the collection. The client does not define this
              value; the API services automatically pass the `?start=` parameter
              on the `nextPage_url`.
            type: optional<string>
          limit:
            docs: The maximum number of items to return in this paged response.
            type: optional<integer>
          occurredOn:
            docs: >-
              Return only transactions whose `occurredOn` date is in this date
              range. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC
              3339](https://tools.ietf.org/html/rfc3339) `date` format. Each
              account has an implicit default transaction history range of _n_
              days. This is normally 30 days but may be shorter for accounts
              with high activity. This _n_ day period is applied to any
              unbounded date ranges. The default date range is the most recent
              _n_ days. Example date ranges: <ul> <li> `2023-05-19` match
              transactions occurring on May 19, 2023.</li> <li>
              `[2023-05-01,2023-05-31]` match transactions occurring between May
              1 and 31, 2023, inclusive</li> <li> `[2023-05-01,2023-06-01)`
              match transactions occurring in May, 2023 (on or after May 1, but
              before June 1)</li> <li> `[2023-05-09,]` match transactions _n_
              days on or after May 9, 2023</li> <li> `(2023-05-09,)` match
              transactions _n_ days after May 9, 2023</li> <li> `[,2023-05-09]`
              match transactions _n_ days on or before May 9, 2023</li> <li>
              `(,2023-05-09)` match transactions _n_ days before but excluding
              May 9, 2023</li> </ul>
            type: optional<string>
          posted:
            docs: >-
              Limit transactions in the response based on the transaction's
              `posted` value. If `true`, include only posted transactions. If
              `false`, include only non-posted transactions. If omitted, do not
              filter based on `posted`. Note that using this filter excludes
              balance transactions because the `posted` property is not set on
              balance transactions, so neither `true` or `false` match them.
            type: optional<boolean>
          category: 
            docs: >-
              Filter transactions to only those whose `category` is in this pipe-separated list.
              Categories are set by a transaction cleansing service or assigned by the account holder.
              Categories can include names such as `"Shopping"`, `"Deposit"`, `"Bill"`, `"Transfer"`, or
              `"Other"`.
            type: optional<transactionCategoryLabel>
            allow-multiple: true
          type: 
            docs: Filter transactions to only those whose `type` is in this pipe-separated list.
            type: optional<transactionType>
            allow-multiple: true
          subtype: 
            docs: Filter transactions to only those whose `subtype` is in this pipe-separated list.
            type: optional<transactionSubType>
            allow-multiple: true
          createdOn:
            docs: >-
              Return only transactions whose `createdOn` date is in this date
              range. Example date ranges are the same format as the `occurredOn`
              query parameter.<br>**Warning**: The parameter `createdOn` was
              deprecated on version `v0.6.0` of the API. Use the `?occurredOn=`
              query parameter instead. `createdOn` will be removed on version
              `v0.9.0` of the API.
            type: optional<string>
          postedOn:
            docs: >-
              Return only transactions whose `postedOn` date is in this date
              range. Example date ranges are the same format as the `occurredOn`
              query parameter.<br>**Warning**: The parameter `postedOn` was
              deprecated on version `v0.6.0` of the API. Use the `?occurredOn=`
              query parameter instead. `postedOn` will be removed on version
              `v0.9.0` of the API.
            type: optional<string>
          amount:
            docs: >-
              Return only transactions whose `amount` is in this numeric range.
              This compares only the absolute value of the transaction. That is,
              the value `[1000.00,1100.00)` matches either a debit of `-1070.25`
              or a credit of `1021.90`.<br> Some examples of specifying an
              amount range: <ul> <li>`1200.50` match the dollar amount 1,200.50
              exactly</li> <li>`[1000.00,1200.00)` matches items where `1000.00
              <= amount < 1200.00`</li> <li>`[1000.00,1199.99]` matches items
              where `1000.00 <= amount <= 1199.99`</li> <li>`(999.99,1200.00]`
              matches items where `999.99 < amount <= 1200.00`</li>
              <li>`[1200.50,]` matches items where `amount >= 1200.50`</li>
              <li>`(1200.50,)` matches items where `amount > 1200.50`</li>
              <li>`[,1200.50]` matches items where `amount <= 1200.50`</li>
              <li>`(,1200.50)` matches items where `amount < 1200.50`</li> </ul>
            type: optional<string>
          retryCount:
            docs: >-
              When retrying the operation, pass the `retryCount` from the
              `incompleteTransactions` response.
            type: optional<integer>
      response: transactions
      errors: 
        - commons.BadRequest
        - commons.Unauthorized
        - commons.Forbidden
        - commons.NotFound
        - commons.UnprocessableEntity
        - commons.TooManyRequests
  
    listTransactionCategories:
      path: /transactionCategories
      method: GET
      docs: >-
        Return a collection of transaction categories. The response is limited
        to 1,000 categories.
        This is a _conditional operation_ when the `If-None-Match` header is
        used. If the client has a `transactionCategories` response and the
        `ETag` returned from a previous call, this operation returns a 304 Not
        Modified if called again when the categories collection has not changed.
      display-name: Return a collection of transaction categories
      request:
        name: listTransactionCategoriesRequest
        headers:
          If-None-Match:
            docs: >-
              The entity tag that was returned in the `ETag` response header of
              a previous call. If the resource's current entity tag value
              matches this header value, the `GET` will return 304 (Not
              Modified) and no response body, else the current resource
              representation and updated `ETag` is returned.
            type: optional<string>
      response: transactionCategories
      errors: 
        - commons.BadRequest
        - commons.Unauthorized
        - commons.Forbidden
        - commons.UnprocessableEntity

types:
  transactionCategories:
    docs: >-
      Collection of transaction categories. The list contains both financial
      institution defined immutable categories and customer defined categories.
    properties:
      items:
        docs: An array containing transaction category items.
        type: list<transactionCategory>

  transactionCategory:
    docs: Representation of transaction category resources.
    extends:
      - commons.abstractBody
      - transactionCategorization
    properties:
      type: transactionCategoryType

  transactionCategoryType:
    docs: >+
      Classifies a transaction category as applying to either debit or credit
      transactions.
      <strong><code>transactionCategoryType</code></strong> strings may have one
      of the following
      [enumerated
      values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):
      <table>
      <tr>
        <th>Value</th><th>Description</th>
      </tr>
      <tr>
          <td><strong><code>credit</code></strong></td><td>Credit: <p>This transaction category applies to credit (expense) transactions.</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>debit</code></strong></td><td>Debit: <p>This transaction category applies to debit (income) transactions.</p>
      </td>
          </tr>
      </table>
    enum:
      - credit
      - debit

  transactionCategorization:
    docs: The transaction categorization.
    properties:
      label: transactionCategoryLabel
      id:
        docs: The unique ID of this transaction's category.
        type: string

  transactionCategoryLabel:
    docs: >-
      The label of a transaction category, such as `"Shopping"`, `"Deposit"`,
      `"Bill"`, `"Transfer"`, or `"Other"`.
    type: string

  transactions:
    docs: >-
      Collection of transactions. The items in the collection are ordered in the
      `items` array. The response object may contain the `nextPage_url`
      pagination link.
    extends:
      - commons.abstractPagedBody
    properties:
      items:
        docs: An array containing a page of transaction items.
        type: optional<list<transactionItem>>
      count:
        docs: >-
          The total number of transactions which satisfy the request filters.
          This is optional and only included if the service can calculate it.
        type: optional<integer>

  amountRange:
    docs: >-
      A monetary amount range, supporting inclusive or exclusive endpoints. The
      value may have the following forms: <ul> <li>`1200.50` match the dollar
      amount 1,200.50 exactly</li> <li>`[1000.00,1200.00)` matches items where
      `1000.00 <= amount < 1200.00`</li> <li>`[1000.00,1199.99]` matches items
      where `1000.00 <= amount <= 1199.99`</li> <li>`[999.99,1200.00]` matches
      items where `999.99 < amount < 1200.00`</li> <li>`[1200.50,]` matches
      items where `amount >= 1200.50`</li> <li>`(1200.50,)` matches items where
      `amount >= 1200.50`</li> <li>`[,1200.50]` matches items where `amount <=
      1200.50`</li> <li>`(,1200.50)` matches items where `amount < 1200.50`</li>
      </ul>
    type: string

  checkNumberRange:
    docs: A numeric range for a checking account check number.
    type: commons.positiveIntegerRange

  transactionItem:
    docs: >-
      Summary representation of a transaction resource in transactions
      collections.
    extends:
      - commons.abstractBody
      - transactionFields

  transactionFields:
    docs: >-
      Common fields of the transaction resource used to build other model
      schemas.
    properties:
      id:
        docs: This transaction's unique identifier.
        type: string
      type: transactionType
      subtype: transactionSubType
      occurredOn:
        docs: >-
          The date of the transaction in `YYYY-MM-DD` [RFC
          3339](https://tools.ietf.org/html/rfc3339) `date` format. This is
          derived and immutable.
        type: string
      createdOn:
        docs: >-
          The date when the transaction occurred in `YYYY-MM-DD` [RFC
          3339](https://tools.ietf.org/html/rfc3339) `date` format. This is
          derived and immutable.<br>**Warning**: The property `createdOn` was
          deprecated on version `v2.1.0` of the schema. Use the `occurredOn`
          property instead. `createdOn` will be removed on version `v3.0.0` of
          the schema.
        type: optional<string>
      postedOn:
        docs: >-
          The date when this transaction was posted (cleared and applied to the
          account balance) in [RFC 3339](https://tools.ietf.org/html/rfc3339)
          date `YYYY-MM-DD` format, UTC. This is derived and immutable and only
          present if `posted` is `true`.<br>**Warning**: The property `postedOn`
          was deprecated on version `v2.1.0` of the schema. Use the `occurredOn`
          property instead. `postedOn` will be removed on version `v3.0.0` of
          the schema.
        type: optional<string>
      amount: commons.creditOrDebitValue
      posted:
        docs: >-
          If `true`, the transaction has been posted (cleared) and applied to
          the account. If `false`, the transaction is still pending and might be
          canceled. `posted` is only valid for credit and debit transactions and
          omitted for balance transactions.
        type: optional<boolean>
      balance: optional<commons.creditOrDebitValue>
      memo:
        docs: The user-settable transaction memo.
        type: optional<string>
      description:
        docs: >-
          The transaction description assigned by the transaction cleansing
          service.
        type: optional<string>
      category: optional<transactionCategorization>
      merchant: optional<transactionMerchant>
      check: optional<transactionCheck>

  transactionType:
    docs: >+
      Distinguishes between balance, debit, or credit transactions.
      <strong><code>transactionType</code></strong> strings may have one of the
      following
      [enumerated
      values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):
      <table>
      <tr>
        <th>Value</th><th>Description</th>
      </tr>
      <tr>
          <td><strong><code>balance</code></strong></td><td>Balance: <p>A pseudo-transaction that conveys the account balance.</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>debit</code></strong></td><td>Debit: <p>A debit against the account.</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>credit</code></strong></td><td>Credit: <p>A credit transaction.</p>
      </td>
          </tr>
      </table>
    enum:
      - balance
      - debit
      - credit

  transactionSubType:
    docs: >+
      If the type is `debit` or `credit`, the subtype conveys further
      transaction type details.
      <strong><code>transactionSubType</code></strong> strings may have one of
      the following
      [enumerated
      values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):
      <table>
      <tr>
        <th>Value</th><th>Description</th>
      </tr>
      <tr>
          <td><strong><code>check</code></strong></td><td>Check: <p>A check drawn from a checking account.</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>other</code></strong></td><td>Other: <p>Some other transaction type.</p>
      </td>
          </tr>
      </table>
    enum:
      - check
      - other

  transactionMerchant:
    docs: Describes the merchant associated with a transaction.
    properties:
      name:
        docs: The merchant\'s name.
        type: optional<string>
      website_url:
        docs: The merchant's website URL.
        type: optional<string>
      logo_url:
        docs: >-
          The optional URL of the merchant's logo. This image must be an image
          resource (SVG, PNG, GIF, JPEG image) that does not require any
          authentication. The URL may contain query parameters.
        type: optional<string>

  transactionCheck:
    docs: >-
      Describes a check associated with a transaction for a checking account.
      This object is only present if the transaction `type` is `debit` and the
      `subtype` is `check`.
    properties:
      number:
        docs: The check number.
        type: integer
      imageFront_url:
        docs: The URL for downloading the image of the front of the check.
        type: optional<string>
      imageBack_url:
        docs: The URL for downloading the image of the front of the check.
        type: optional<string>
