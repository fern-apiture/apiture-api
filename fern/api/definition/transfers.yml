# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml
  products: products.yml
  accounts: accounts.yml

service:
  auth: true
  base-path: /transfers
  endpoints:
    listTransfers:
      path: ""
      method: GET
      docs: >-
        Return a
        [paginated](https://dx.apiture.com/docs/api-documentation/concepts/pagination)
        collection of transfers. The
        [nextPage_url](https://dx.apiture.com/docs/api-documentation/concepts/links)
        in the response is a pagination link.
      display-name: Return a collection of transfers
      request:
        name: listTransfersRequest
        query-parameters:
          scheduledOn:
            docs: >-
              Return only transactions whose `schedule.scheduledOn` date is in
              this date range. Excludes any transfers that do not have a
              `scheduledOn` date. Dates ranges use dates expressed in
              `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339)
              `date` format. Example date ranges: <ul> <li> `2022-05-19` match
              only transfers scheduled on May 19, 2022.</li> <li>
              `[2022-05-01,2022-06-01)` in May, 2022: on or after May 1, but
              _before_ June 1</li> <li> `(2022-05-01,2022-06-01)` in May, 2022
              (on or after May 1, but before June 1)</li> <li> `[2022-05-09,]`
              on or after May 9, 2022</li> <li> `(2022-05-09,)` after May 9,
              2022</li> <li> `[,2022-05-09]` on or before May 9, 2022</li> <li>
              `(,2022-05-09)` before May 9, 2022</li> </ul>
            type: optional<string>
          debitsOn:
            docs: >-
              Return only transactions whose `schedule.debitsOn` date (when the
              funds are debited from the source account) is in this date range.
              Excludes any transfers that do not have a `scheduledOn` date.
              Dates ranges use dates expressed in `YYYY-MM-DD` [RFC
              3339](https://tools.ietf.org/html/rfc3339) `date` format. See the
              `scheduledOn` query parameter for examples.
            type: optional<string>
          creditsOn:
            docs: >-
              Return only transactions whose `schedule.creditsOn` (when the
              funds are credited to  the target account) is in this date range.
              Excludes any transfers that do not have a `scheduledOn` date.
              Dates ranges use dates expressed in `YYYY-MM-DD` [RFC
              3339](https://tools.ietf.org/html/rfc3339) `date` format. See the
              `scheduledOn` query parameter for examples.
            type: optional<string>
          historical:
            docs: >-
              If `true`, list only historical (`state` is `processed`)
              transfers. If `false`, list only transfers that have not yet
              finished processing. If omitted, list all transfers.
            type: optional<boolean>
          start:
            docs: >-
              The location of the next item in the collection. This is an opaque
              cursor supplied by the API service. Omit this to start at the
              beginning of the collection. The client does not define this
              value; the API services automatically pass the `?start=` parameter
              on the `nextPage_url`.
            type: optional<string>
          limit:
            docs: The maximum number of items to return in this paged response.
            type: optional<integer>
      response: transfers
      errors: 
        - commons.BadRequest
        - commons.Unauthorized
        - commons.Forbidden
        - commons.UnprocessableEntity

    createTransfer:
      path: ""
      method: POST
      docs: >-
        Create a new transfer within the transfers collection. If all the
        necessary properties are set, the transfer is queued for processing. If
        the request omits the `schedule.scheduledOn` date, the transfer remains
        pending/unscheduled until the user sets it via the
        [`patchTransfer`](#op-patchTransfer) operation.
        Note: This operation requires an identity challenge if the financial
        institution requires the user to proove their identity for some types of
        transfers. See the "Challenges API".
      display-name: Create a new transfer
      request:
        name: newTransfer
        headers:
          Challenge:
            docs: >-
              This operation may require a completed challenge. If the first
              attempt calling this operation fails with a 401
              `challengeRequired` error, the client should complete the
              challenge flow as described in the Challenges API, then retry the
              operation with this `Challenge` request header using the
              `challengeToken` returned at the end of that flow. If this is
              passed but the value is invalid, the operation fails with a 401
              status code and the `invalidChallengeHeader` problem type.
            type: optional<string>
        body:
          extends:
            - commons.abstractBody
            - transferFields
          properties:
            schedule: optional<transferSchedule>
      errors: 
        - commons.BadRequest
        - commons.Unauthorized
        - commons.Forbidden
        - commons.UnprocessableEntity

    getTransfer:
      path: /{transferId}
      method: GET
      docs: Return the JSON representation of this transfer resource.
      display-name: Fetch a representation of this transfer
      path-parameters:
        transferId:
          docs: The unique identifier of this transfer. This is an opaque string.
          type: string
      response: transfer
      errors: 
        - commons.Unauthorized
        - commons.Forbidden
        - commons.NotFound

    deleteTransfer:
      path: /{transferId}
      method: DELETE
      docs: >-
        Delete this transfer resource and any resources that are owned by it.
        Only transfers that have not been processed may be deleted.
      display-name: Delete this transfer resource
      path-parameters:
        transferId:
          docs: The unique identifier of this transfer. This is an opaque string.
          type: string
      errors: 
        - commons.BadRequest
        - commons.Unauthorized
        - commons.NotFound

    patchTransfer:
      path: /{transferId}
      method: PATCH
      docs: >-
        Perform a partial update of this transfer as per [JSON Merge
        Patch](https://datatracker.ietf.org/doc/html/rfc7396) format and
        processing rules. Only fields in the request body are updated on the
        resource; fields which are omitted are not updated.
        Note: This operation requires an identity challenge if the financial
        institution requires the user to prove their identity for some types of
        transfers. See the "Challenges API".
      display-name: Update this transfer
      path-parameters:
        transferId:
          docs: The unique identifier of this transfer. This is an opaque string.
          type: string
      request:
        name: transferPatch
        headers:
          Challenge:
            docs: >-
              This operation may require a completed challenge. If the first
              attempt calling this operation fails with a 401
              `challengeRequired` error, the client should complete the
              challenge flow as described in the Challenges API, then retry the
              operation with this `Challenge` request header using the
              `challengeToken` returned at the end of that flow. If this is
              passed but the value is invalid, the operation fails with a 401
              status code and the `invalidChallengeHeader` problem type.
            type: optional<string>
        body:
          extends:
            - commons.abstractBody
            - transferFields
          properties:
            schedule: optional<transferSchedule>
      response: transfer
      errors: 
        - commons.BadRequest
        - commons.Unauthorized
        - commons.Forbidden
        - commons.NotFound
        - commons.UnprocessableEntity

types:
  transfers:
    docs: >-
      Collection of transfers. The items in the collection are ordered in the
      `items` array. The response object may contain the `nextPage_url`
      pagination link..
    extends:
      - commons.abstractPagedBody
    properties:
      items:
        docs: An array containing a page of transfer items.
        type: list<transferItem>
      count:
        docs: >-
          The number of transfers that meet the filters in the `listTransfers`
          operation. This is optional and only included if the service can
          calculate it efficiently.
        type: optional<integer>

  transferItem:
    docs: >-
      Summary representation of a transfer resource in transfers collections. To
      fetch the full representation of this transfer, use the
      [`getTransfer`](#op-getTransfer) operation, passing this item's `id` field
      as the `transferId` path parameter.
    extends:
      - transferFields
      - timestampFields
    properties:
      id:
        docs: >-
          The unique identifier for this transfer resource. This is an immutable
          opaque string.
        type: commons.readOnlyResourceId
      schedule: transferItemSchedule
      state:
        docs: The state of this transfer resource.
        type: transferState
      processedAt:
        docs: The date/time the transfer was processed.
        type: optional<string>
      updatedBy:
        docs: The full name of the banking customer who last updated the transfer.
        type: optional<string>

  transferFields:
    docs: Common fields of the transfer resource used to build other model schemas.
    properties:
      amount: optional<monetaryValue>
      sourceAccount: optional<transferAccountReference>
      targetAccount: optional<transferAccountReference>
      memo:
        docs: A customer-defined memo to describe the transfer.
        type: optional<string>

  monetaryValue:
    docs: >-
      The monetary value, supporting only positive amounts. The numeric value
      is  represented as a string so that it can be exact with no loss of
      precision.<br>The schema `monetaryValue` was added on version `0.4.0` of
      the API.
    type: string

  transferAccountReference:
    docs: >-
      A reference to a banking account used within an account to account
      transfer. This object may be set from an account's `account.reference`
      object.
    properties:
      id: commons.resourceId
      label:
        docs: >-
          The human-readable label for this account. This is either the
          `nickname` (if assigned for the current customer), or the
          `product.label` concatenated with the `maskedNumber`.
        type: optional<string>
      type: optional<products.productType>
      location: optional<accounts.accountLocation>

  timestampFields:
    docs: Timestamps which describe when a resource was created or last updated.
    properties:
      createdAt:
        docs: >-
          The date-time when this resource was created, in [RFC
          3339](https://tools.ietf.org/html/rfc3339) date-time
          `YYYY-MM-DDThh:mm:ss.sssZ` format, UTC. This is derived and immutable.
        type: optional<string>
      updatedAt:
        docs: >-
          The date-time when the resource was last updated, in [RFC
          3339](https://tools.ietf.org/html/rfc3339) date-time
          `YYYY-MM-DDThh:mm:ss.sssZ` format, UTC. This is derived and immutable.
        type: optional<string>

  transferItemSchedule:
    docs: >-
      A transfer's schedule: when the transfer is scheduled, its recurrence
      properties, and derived credit and debit dates.
    extends:
      - transferSchedule
    properties:
      debitsOn:
        docs: >-
          The effective date the transfer is scheduled to debit the source
          account, in `YYYY-MM-DD` [RFC
          3339](https://tools.ietf.org/html/rfc3339) `date` format. This is
          derived from the `scheduledOn` date, based on the financial
          institution's transfer rules.
        type: optional<string>
      creditsOn:
        docs: >-
          The effective the transfer is scheduled to credit the target account,
          in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date`
          format. This is derived from the `scheduledOn` date, based on the
          financial institution's transfer rules.
        type: optional<string>

  transferSchedule:
    docs: >-
      The scheduled date when the transfer should be completed, the recurrence,
      if any, and other derived dates based on the scheduled date.
      For recurring transfer schedules, `endsOn`, `count`, and `amountLimit` are
      mutually exclusive.
    properties:
      scheduledOn:
        docs: >-
          The date the the customer scheduled the transfer to occur in
          `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date`
          format.
        type: optional<string>
      recurrenceType: optional<transferRecurrenceType>
      frequency: commons.transferFrequency
      endsOn:
        docs: >-
          The optional date when the recurring transfer schedule ends, in
          `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date
          format. Subsequent recurring transfers may be scheduled up to and
          including this date, but not after. This property is ignored if
          `frequency` is `once`.
        type: optional<string>
      count:
        docs: >-
          For recurring schedules (`frequency` is not `once`), this is the total
          number of transfers to make, including the first transfer. This
          property is ignored if `frequency` is `once`.
        type: optional<integer>
      amountLimit: optional<monetaryValue>

  transferRecurrenceType:
    docs: >+
      Describes whether the transfer amount in the transfer varies or is fixed
      when the transfer recurs. This is ignored if the transfer frequency is
      `once`.
      <strong><code>transferRecurrenceType</code></strong> strings may have one
      of the following
      [enumerated
      values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):
      <table>
      <tr>
        <th>Value</th><th>Description</th>
      </tr>
      <tr>
          <td><strong><code>fixed</code></strong></td><td>Fixed: <p>The transfer amounts are the same each time a transfer recurs</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>variable</code></strong></td><td>Variable: <p>The transfer amounts vary and must be entered/verified each time a transfer recurs</p>
      </td>
          </tr>
      </table>
    enum:
      - fixed
      - variable

  transferState:
    docs: >+
      The state of a transfer resource.
      <strong><code>transferState</code></strong> strings may have one of the
      following
      [enumerated
      values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):
      <table>
      <tr>
        <th>Value</th><th>Description</th>
      </tr>
      <tr>
          <td><strong><code>unscheduled</code></strong></td><td>Unscheduled: <p>A transfer which is not ready to be queued for processing</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>pendingApproval</code></strong></td><td>Pending Approval: <p>A transfer which is awaiting approval before it can be queued for processing</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>scheduled</code></strong></td><td>Scheduled: <p>A transfer which has been queued for processing</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>processing</code></strong></td><td>Processing: <p>A transfer which is being processed</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>processed</code></strong></td><td>Processed: <p>A transfer which has completed processing</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>failed</code></strong></td><td>Failed: <p>A transfer which has cannot be processed or failed while processing</p>
      </td>
          </tr>
      <tr>
          <td><strong><code>other</code></strong></td><td>Other: <p>A transfer which is in some other state</p>
      </td>
          </tr>
      </table>
    enum:
      - unscheduled
      - pendingApproval
      - scheduled
      - processing
      - processed
      - failed
      - other

  transfer:
    docs: Representation of a transfer resource.
    extends:
      - commons.abstractBody
      - transferItem

  challengeToken:
    docs: >-
      The value of the identity `Challenge` request header that the client must
      send when retrying an operation which required a challenge.
    type: string
