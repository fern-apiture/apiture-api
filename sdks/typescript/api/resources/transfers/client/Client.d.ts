/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import { ApitureApi } from "../../../..";
export declare namespace Transfers {
    interface Options {
        environment: string;
        acessToken: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
    }
}
export declare class Transfers {
    protected readonly options: Transfers.Options;
    constructor(options: Transfers.Options);
    /**
     * Return a [paginated](https://dx.apiture.com/docs/api-documentation/concepts/pagination) collection of transfers. The [nextPage_url](https://dx.apiture.com/docs/api-documentation/concepts/links) in the response is a pagination link.
     * @throws {ApitureApi.BadRequest}
     * @throws {ApitureApi.Unauthorized}
     * @throws {ApitureApi.Forbidden}
     * @throws {ApitureApi.UnprocessableEntity}
     */
    listTransfers(request?: ApitureApi.ListTransfersRequest): Promise<ApitureApi.Transfers>;
    /**
     * Create a new transfer within the transfers collection. If all the necessary properties are set, the transfer is queued for processing. If the request omits the `schedule.scheduledOn` date, the transfer remains pending/unscheduled until the user sets it via the [`patchTransfer`](#op-patchTransfer) operation. Note: This operation requires an identity challenge if the financial institution requires the user to proove their identity for some types of transfers. See the "Challenges API".
     * @throws {ApitureApi.BadRequest}
     * @throws {ApitureApi.Unauthorized}
     * @throws {ApitureApi.Forbidden}
     * @throws {ApitureApi.UnprocessableEntity}
     */
    createTransfer(request?: ApitureApi.NewTransfer): Promise<void>;
    /**
     * Return the JSON representation of this transfer resource.
     * @throws {ApitureApi.Unauthorized}
     * @throws {ApitureApi.Forbidden}
     * @throws {ApitureApi.NotFound}
     */
    getTransfer(transferId: string): Promise<ApitureApi.Transfer>;
    /**
     * Delete this transfer resource and any resources that are owned by it. Only transfers that have not been processed may be deleted.
     * @throws {ApitureApi.BadRequest}
     * @throws {ApitureApi.Unauthorized}
     * @throws {ApitureApi.NotFound}
     */
    deleteTransfer(transferId: string): Promise<void>;
    /**
     * Perform a partial update of this transfer as per [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7396) format and processing rules. Only fields in the request body are updated on the resource; fields which are omitted are not updated. Note: This operation requires an identity challenge if the financial institution requires the user to prove their identity for some types of transfers. See the "Challenges API".
     * @throws {ApitureApi.BadRequest}
     * @throws {ApitureApi.Unauthorized}
     * @throws {ApitureApi.Forbidden}
     * @throws {ApitureApi.NotFound}
     * @throws {ApitureApi.UnprocessableEntity}
     */
    patchTransfer(transferId: string, request?: ApitureApi.TransferPatch): Promise<ApitureApi.Transfer>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
